# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches:
      - "**"
    paths: 
      - 'VERSION.txt'

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release
    - name: Upload a Build Artifact
      id: artifacto
      uses: actions/upload-artifact@v4.6.1
      with:
        # Artifact name
        name: artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: bin/
        # The desired behavior if no files are found using the provided path.
    - name: Read VERSION file
      id: getversion
      run: echo "::set-output name=version::$(cat VERSION.txt)"
    - name: Create a Release in a GitHub Action
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # You may pin to the exact commit or the version.
      # uses: comnoco/create-release-action@7dea6dc82ac9d97ced7a764aa82811451bba80e0
      uses: comnoco/create-release-action@v2.0.5
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: ${{ steps.getversion.outputs.version }}
        # The name of the release. For example, `Release v1.0.1`
        release_name: v${{ steps.getversion.outputs.version }}-beta
        # Text describing the contents of the tag.
        body_path: CHANGELOG.md
        # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
        prerelease: false
    - name: Archive Release
      uses: thedoctor0/zip-release@0.7.5
      with:
        type: 'zip'
        filename: 'release.zip'
        path: bin/
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./release.zip
        asset_name: v${{ steps.getversion.outputs.version }}-beta.zip
        asset_content_type: application/zip
              
